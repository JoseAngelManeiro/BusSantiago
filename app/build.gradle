apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// First, we try to access to CircleCI environment variable,
// if this is a local build, we obtain api key from a local file
def getApiKeyDebug() {
    def apiKeyDebug = System.getenv("API_KEY_DEBUG")
    if (apiKeyDebug == null || apiKeyDebug.length() == 0) {
        def apiKeyPropertiesFile = rootProject.file("apikey.properties")
        def apiKeyProperties = new Properties()
        apiKeyProperties.load(new FileInputStream(apiKeyPropertiesFile))
        apiKeyDebug = apiKeyProperties['apikeyDebug']
    }
    return apiKeyDebug
}
def getApiKeyRelease() {
    def apiKeyRelease = System.getenv("API_KEY_RELEASE")
    if (apiKeyRelease == null || apiKeyRelease.length() == 0) {
        def apiKeyPropertiesFile = rootProject.file("apikey.properties")
        def apiKeyProperties = new Properties()
        apiKeyProperties.load(new FileInputStream(apiKeyPropertiesFile))
        apiKeyRelease = apiKeyProperties['apikeyRelease']
    }
    return apiKeyRelease
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "org.galio.bussantiago"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 42
        versionName "4.0.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue "string", "app_version", "v${defaultConfig.versionName}"
    }

    signingConfigs {
        release {
            storeFile file(System.getenv("KEYSTORE") ?: "keystore.jks")
            storePassword System.getenv("STORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            resValue("string", "google_maps_api_key", getApiKeyDebug())
        }
        release {
            resValue("string", "google_maps_api_key", getApiKeyRelease())

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        main {
            res.srcDirs =
                    ['src/main/res/layouts/app',
                     'src/main/res/layouts/widget',
                     'src/main/res/layouts',
                     'src/main/res']
        }
    }

    androidExtensions {
        experimental = true
    }

    lintOptions {
        lintConfig file("$rootDir/app/lint-rules.xml")
        abortOnError true
        ignoreWarnings false
        htmlReport true
        htmlOutput file("$rootDir/app/lint-results.html")
    }
}

dependencies {
    implementation project(':core')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.2.1'

    // ViewModel
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.1'

    // Koin
    implementation 'org.koin:koin-android-viewmodel:2.0.1'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'

    // Maps & Location
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'

    // Play Core (In-app reviews)
    implementation 'com.google.android.play:core:1.9.0'

    // Mockito
    testImplementation 'org.mockito:mockito-core:2.23.4'
    // Mockito (final classes)
    testImplementation 'org.mockito:mockito-inline:2.23.4'

    testImplementation 'junit:junit:4.13'

    testImplementation 'androidx.arch.core:core-testing:2.1.0'
}
